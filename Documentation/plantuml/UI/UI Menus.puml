@startuml

hide empty members

class UIManager {
  +Action<bool> OnUIToggle
  +Action OnEnteringUI
  +Action OnExitingUI
  -Menu defaultMenu
  -TileSensorMenu TileSensorPreview
  -Menu dashboardMenu
  -Menu pauseMenu
  +Menu ActiveMenu
  +{static} bool dashboardMode = false
  -Dictionary<Key, Menu> keytoMenuDict
  -{static} List<Menu> activeMenus
  +{static} UIManager Instance
  -void Start()
  +void Subscribe(Menu)
  +void ReceiveMenuKey(Key)
  +void ToggleMenu(Menu)
  +void LoadMainMenuScene()
  -void RemoveMenu(Menu)
  -void AddMenu()
  +bool IsUIActive()
  +{static} void CloseAll()
  +void OnNumberKeyPress()
  +void NextTab()
  +void ToggleSensorPopup()
  -void InspectTile(Vector2Int)
  +void OnPointerEnter()
  +void OnPointerExit()
}

class Menu {
  -UIManager uiManager
  -TabGroup tabGroup
  +Key Key
  +Action<Menu> OnOpen
  +Action<Menu> OnClose
  +Action OnEnter
  +Action OnExit
  #void Start()
  +void Close()
  +void Open()
  +void Toggle()
  +bool IsOpen()
  +void NextTab()
  +void OnNumberKeyPress(int)
  +void OnPointerEnter(PointerEventData)
  +void OnPointerExit(PointerEventData)
}

class GlideMenu {
  +bool DeactivateOnClose = true
  -EUIPosition uiPosition = EUIPosition.Bottom
  -Canvas Canvas
  -Rect menuBounds
  -Vector2 closedPosition
  -Vector2 openPosition
  -bool isOpen
  -float GlideTime = 0.5f
  #override void Start()
  -void Update()
  +override void Open()
  +override bool IsOpen()
  +bool IsVisible()
  +override void Close()
  +override void Toggle()
  +void InstantlyClose()
  -Vector2 CalculateClosedPosition()
  -bool BasicallyAtClosedPosition()
}

class TileSensorMenu {
  +UIBackgroundSprite CardColor
  -UICardManager menu
  -Tile focusedTile
  -void FocusTile(Vector2Int)
  -void TrySetMenuTo(Vector2Int)
  -void PopulateFromTile(Tile)
  -void AddSensorToMenu(SensorType)
}

class SensorLogMenu {
  -GameObject NoSensorCoverObject
  -Menu DashboardMenu
  -UICardManager menu
  -SensorInfoMenu sensorInfoMenu
  -ISensor targetedSensor
  -Dictionary<ISensor, NameAndValueCard> sensorMapping
  -Dictionary<UIClickable, ISensor> cardMapping
  -UIClickable lastCardClicked
  -SortMode currentSort = SortMode.None
  +bool TryAddSensor(ISensor)
  -void CardClicked(UIClickable)
  -void ReachedSensor(Vector3)
  +bool TryRemoveSensor(ISensor)
  +void UpdateSensorLog(ISensor)
  +void SortByType()
  +void SortByStatus()
  -void SetSort(SortMode)
  -void SortCardType(ISensor, NameAndValueCard)
  -void UpdateCard(NameAndValueCard, string, UIBackgroundSprite)
  -void UpdatePositionalStanding(NameAndValueCard)
}

enum SortMode
{
    None
    Status
    Type
}

class SensorInfoMenu {
  -GameObject sensorInfoMenu
  -GameObject NorthLight
  -GameObject EastLight
  -GameObject WestLight
  -GameObject SouthLight
  -GameObject ArrowTop
  -GameObject ArrowBottom
  -GameObject ButtonAndTextCanvas
  -TextMeshProUGUI DelayText
  -GameObject ResetViewButton
  +Action<bool> DisableCameraControls
  -RoadTile currentRoad
  -TrafficLightController currentTrafficLight
  -bool isShowing = false
  -Vector3 lastTileTransform
  -void Start()
  -void Update()
  -void FirstTimeUpdateView()
  -void SwapLights()
  -void RotateArrows()
  +void SetVisible(Vector3)
  +void DisableUserInput()
  +bool IsFullyVisible()
  +void OnNumberKeyPress(int)
  +void ToggleMenuHandler()
  +void EnableMenu()
  +void DisableMenu()
  +void ChangeTrafficFlow()
  +void DetermineRotation(RoadTile)
  +void ResetLights()
  +void OnResetClicked()
}

class SensorLogUIController {
  -List<ISensor> sensors
  -ListeningStage stage
  -Menu Menu
  -GameObject pageReference
  -SensorLogMenu log
  -void Update()
  -void SetActiveListenMode(bool)
  -void RegisterSensor(ISensor)
  -void DeregisterSensor(ISensor)
  -void ListenToSensor(ISensor)
  -void StopListeningToSensor(ISensor)
  -void FullRefreshLog()
  -void UpdateSensorStatus(ISensor)
}

enum ListeningStage
{
    Disabled
    FullRefresh
    ChangeOnly
}

class HeatmapUIController {
  -HeatMap heatmap
  -Image heatmapImage
  -void Start()
  -void UpdateGraphic(HeatMap)
  +void CreateHeatMap(int, int)
  +void UpdateSpriteFromTexture(Texture2D)
}

class TabGroup {
  +List<TabButton> TabButtons
  +List<GameObject> Pages
  +List<PageControls> PageControls
  -PageControls activeControls
  +Sprite tabIdle
  +Sprite tabHover
  +Sprite tabActive
  -int defaultTab
  -TabButton ActiveTab
  +void Subscribe(TabButton)
  +{static} int CompareIndexes(TabButton, TabButton)
  +void OnTabEnter(TabButton)
  +void OnTabExit(TabButton)
  +void OnTabSelected(TabButton)
  +void ResetTabs(bool = false)
  +void NextTab()
  -void SwitchToTab(int)
  +void OnNumberKeyPress(int)
}

class TabButton {
  +TabGroup TabGroup;
  +Image background;
  +bool IsTabEnabled = false
  -void Start()
  +void OnPointerEnter(PointerEventData)
  +void OnPointerClick(PointerEventData)
  +void OnPointerExit(PointerEventData)
}

class PageControls {
  +List<Button> NumberKeyButtons;
}

enum EUIPosition {
    top
    bottom
    left
    right
}

UIManager --o "Manages" Menu
GlideMenu "Positions based on" <-- EUIPosition
TabGroup "Listens to" --o TabButton
TabGroup "Listens to" --o PageControls
Menu --|> "extends" GlideMenu
Menu "Can contain" -- TabGroup
Menu --|> "Extends" TileSensorMenu
SensorLogUIController <-- "Accepts sensor info based on" ListeningStage
SensorLogMenu "Sorts cards based on" <-- SortMode

@enduml